// Code generated by thriftgo (0.3.2). DO NOT EDIT.

package notification

import (
	"Vnollx/kitex_gen/base"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type GetNotificationsByUserIdRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewGetNotificationsByUserIdRequest() *GetNotificationsByUserIdRequest {
	return &GetNotificationsByUserIdRequest{}
}

func (p *GetNotificationsByUserIdRequest) InitDefault() {
	*p = GetNotificationsByUserIdRequest{}
}

func (p *GetNotificationsByUserIdRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetNotificationsByUserIdRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_GetNotificationsByUserIdRequest = map[int16]string{
	1: "user_id",
}

func (p *GetNotificationsByUserIdRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNotificationsByUserIdRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetNotificationsByUserIdRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetNotificationsByUserIdRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNotificationsByUserIdRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNotificationsByUserIdRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNotificationsByUserIdRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotificationsByUserIdRequest(%+v)", *p)
}

func (p *GetNotificationsByUserIdRequest) DeepEqual(ano *GetNotificationsByUserIdRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetNotificationsByUserIdRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type GetNotificationsByUserIdResponse struct {
	Base          *base.BaseResponse       `thrift:"base,1" frugal:"1,default,base.BaseResponse" json:"base"`
	Notifications []*base.NotificationInfo `thrift:"notifications,2" frugal:"2,default,list<base.NotificationInfo>" json:"notifications"`
}

func NewGetNotificationsByUserIdResponse() *GetNotificationsByUserIdResponse {
	return &GetNotificationsByUserIdResponse{}
}

func (p *GetNotificationsByUserIdResponse) InitDefault() {
	*p = GetNotificationsByUserIdResponse{}
}

var GetNotificationsByUserIdResponse_Base_DEFAULT *base.BaseResponse

func (p *GetNotificationsByUserIdResponse) GetBase() (v *base.BaseResponse) {
	if !p.IsSetBase() {
		return GetNotificationsByUserIdResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetNotificationsByUserIdResponse) GetNotifications() (v []*base.NotificationInfo) {
	return p.Notifications
}
func (p *GetNotificationsByUserIdResponse) SetBase(val *base.BaseResponse) {
	p.Base = val
}
func (p *GetNotificationsByUserIdResponse) SetNotifications(val []*base.NotificationInfo) {
	p.Notifications = val
}

var fieldIDToName_GetNotificationsByUserIdResponse = map[int16]string{
	1: "base",
	2: "notifications",
}

func (p *GetNotificationsByUserIdResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNotificationsByUserIdResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNotificationsByUserIdResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetNotificationsByUserIdResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResponse()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNotificationsByUserIdResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Notifications = make([]*base.NotificationInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewNotificationInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Notifications = append(p.Notifications, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetNotificationsByUserIdResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNotificationsByUserIdResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNotificationsByUserIdResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNotificationsByUserIdResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notifications", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Notifications)); err != nil {
		return err
	}
	for _, v := range p.Notifications {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNotificationsByUserIdResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNotificationsByUserIdResponse(%+v)", *p)
}

func (p *GetNotificationsByUserIdResponse) DeepEqual(ano *GetNotificationsByUserIdResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Notifications) {
		return false
	}
	return true
}

func (p *GetNotificationsByUserIdResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNotificationsByUserIdResponse) Field2DeepEqual(src []*base.NotificationInfo) bool {

	if len(p.Notifications) != len(src) {
		return false
	}
	for i, v := range p.Notifications {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DeleteNotificationRequest struct {
	UserId         int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	NotificationId int64 `thrift:"notification_id,2" frugal:"2,default,i64" json:"notification_id"`
}

func NewDeleteNotificationRequest() *DeleteNotificationRequest {
	return &DeleteNotificationRequest{}
}

func (p *DeleteNotificationRequest) InitDefault() {
	*p = DeleteNotificationRequest{}
}

func (p *DeleteNotificationRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DeleteNotificationRequest) GetNotificationId() (v int64) {
	return p.NotificationId
}
func (p *DeleteNotificationRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeleteNotificationRequest) SetNotificationId(val int64) {
	p.NotificationId = val
}

var fieldIDToName_DeleteNotificationRequest = map[int16]string{
	1: "user_id",
	2: "notification_id",
}

func (p *DeleteNotificationRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteNotificationRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteNotificationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DeleteNotificationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.NotificationId = v
	}
	return nil
}

func (p *DeleteNotificationRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNotificationRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNotificationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteNotificationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("notification_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.NotificationId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteNotificationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNotificationRequest(%+v)", *p)
}

func (p *DeleteNotificationRequest) DeepEqual(ano *DeleteNotificationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NotificationId) {
		return false
	}
	return true
}

func (p *DeleteNotificationRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *DeleteNotificationRequest) Field2DeepEqual(src int64) bool {

	if p.NotificationId != src {
		return false
	}
	return true
}

type DeleteNotificationResponse struct {
	Base *base.BaseResponse `thrift:"base,1" frugal:"1,default,base.BaseResponse" json:"base"`
}

func NewDeleteNotificationResponse() *DeleteNotificationResponse {
	return &DeleteNotificationResponse{}
}

func (p *DeleteNotificationResponse) InitDefault() {
	*p = DeleteNotificationResponse{}
}

var DeleteNotificationResponse_Base_DEFAULT *base.BaseResponse

func (p *DeleteNotificationResponse) GetBase() (v *base.BaseResponse) {
	if !p.IsSetBase() {
		return DeleteNotificationResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteNotificationResponse) SetBase(val *base.BaseResponse) {
	p.Base = val
}

var fieldIDToName_DeleteNotificationResponse = map[int16]string{
	1: "base",
}

func (p *DeleteNotificationResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteNotificationResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteNotificationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteNotificationResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResponse()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNotificationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNotificationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNotificationResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteNotificationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNotificationResponse(%+v)", *p)
}

func (p *DeleteNotificationResponse) DeepEqual(ano *DeleteNotificationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteNotificationResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SendNotificationRequest struct {
	UserId   int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
	TouserId int64 `thrift:"touser_id,2" frugal:"2,default,i64" json:"touser_id"`
}

func NewSendNotificationRequest() *SendNotificationRequest {
	return &SendNotificationRequest{}
}

func (p *SendNotificationRequest) InitDefault() {
	*p = SendNotificationRequest{}
}

func (p *SendNotificationRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *SendNotificationRequest) GetTouserId() (v int64) {
	return p.TouserId
}
func (p *SendNotificationRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *SendNotificationRequest) SetTouserId(val int64) {
	p.TouserId = val
}

var fieldIDToName_SendNotificationRequest = map[int16]string{
	1: "user_id",
	2: "touser_id",
}

func (p *SendNotificationRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SendNotificationRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SendNotificationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *SendNotificationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TouserId = v
	}
	return nil
}

func (p *SendNotificationRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendNotificationRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SendNotificationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SendNotificationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("touser_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TouserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SendNotificationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendNotificationRequest(%+v)", *p)
}

func (p *SendNotificationRequest) DeepEqual(ano *SendNotificationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.TouserId) {
		return false
	}
	return true
}

func (p *SendNotificationRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *SendNotificationRequest) Field2DeepEqual(src int64) bool {

	if p.TouserId != src {
		return false
	}
	return true
}

type SendNotificationResponse struct {
	Base *base.BaseResponse `thrift:"base,1" frugal:"1,default,base.BaseResponse" json:"base"`
}

func NewSendNotificationResponse() *SendNotificationResponse {
	return &SendNotificationResponse{}
}

func (p *SendNotificationResponse) InitDefault() {
	*p = SendNotificationResponse{}
}

var SendNotificationResponse_Base_DEFAULT *base.BaseResponse

func (p *SendNotificationResponse) GetBase() (v *base.BaseResponse) {
	if !p.IsSetBase() {
		return SendNotificationResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *SendNotificationResponse) SetBase(val *base.BaseResponse) {
	p.Base = val
}

var fieldIDToName_SendNotificationResponse = map[int16]string{
	1: "base",
}

func (p *SendNotificationResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *SendNotificationResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SendNotificationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SendNotificationResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewBaseResponse()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SendNotificationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendNotificationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SendNotificationResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SendNotificationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendNotificationResponse(%+v)", *p)
}

func (p *SendNotificationResponse) DeepEqual(ano *SendNotificationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SendNotificationResponse) Field1DeepEqual(src *base.BaseResponse) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NotificationService interface {
	GetNotificationsByUserId(ctx context.Context, req *GetNotificationsByUserIdRequest) (r *GetNotificationsByUserIdResponse, err error)

	DeleteNotification(ctx context.Context, req *DeleteNotificationRequest) (r *DeleteNotificationResponse, err error)

	SendNotification(ctx context.Context, req *SendNotificationRequest) (r *SendNotificationResponse, err error)
}

type NotificationServiceClient struct {
	c thrift.TClient
}

func NewNotificationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *NotificationServiceClient {
	return &NotificationServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewNotificationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *NotificationServiceClient {
	return &NotificationServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewNotificationServiceClient(c thrift.TClient) *NotificationServiceClient {
	return &NotificationServiceClient{
		c: c,
	}
}

func (p *NotificationServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *NotificationServiceClient) GetNotificationsByUserId(ctx context.Context, req *GetNotificationsByUserIdRequest) (r *GetNotificationsByUserIdResponse, err error) {
	var _args NotificationServiceGetNotificationsByUserIdArgs
	_args.Req = req
	var _result NotificationServiceGetNotificationsByUserIdResult
	if err = p.Client_().Call(ctx, "GetNotificationsByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *NotificationServiceClient) DeleteNotification(ctx context.Context, req *DeleteNotificationRequest) (r *DeleteNotificationResponse, err error) {
	var _args NotificationServiceDeleteNotificationArgs
	_args.Req = req
	var _result NotificationServiceDeleteNotificationResult
	if err = p.Client_().Call(ctx, "DeleteNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *NotificationServiceClient) SendNotification(ctx context.Context, req *SendNotificationRequest) (r *SendNotificationResponse, err error) {
	var _args NotificationServiceSendNotificationArgs
	_args.Req = req
	var _result NotificationServiceSendNotificationResult
	if err = p.Client_().Call(ctx, "SendNotification", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type NotificationServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      NotificationService
}

func (p *NotificationServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *NotificationServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *NotificationServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewNotificationServiceProcessor(handler NotificationService) *NotificationServiceProcessor {
	self := &NotificationServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetNotificationsByUserId", &notificationServiceProcessorGetNotificationsByUserId{handler: handler})
	self.AddToProcessorMap("DeleteNotification", &notificationServiceProcessorDeleteNotification{handler: handler})
	self.AddToProcessorMap("SendNotification", &notificationServiceProcessorSendNotification{handler: handler})
	return self
}
func (p *NotificationServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type notificationServiceProcessorGetNotificationsByUserId struct {
	handler NotificationService
}

func (p *notificationServiceProcessorGetNotificationsByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotificationServiceGetNotificationsByUserIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetNotificationsByUserId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := NotificationServiceGetNotificationsByUserIdResult{}
	var retval *GetNotificationsByUserIdResponse
	if retval, err2 = p.handler.GetNotificationsByUserId(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNotificationsByUserId: "+err2.Error())
		oprot.WriteMessageBegin("GetNotificationsByUserId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetNotificationsByUserId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type notificationServiceProcessorDeleteNotification struct {
	handler NotificationService
}

func (p *notificationServiceProcessorDeleteNotification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotificationServiceDeleteNotificationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteNotification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := NotificationServiceDeleteNotificationResult{}
	var retval *DeleteNotificationResponse
	if retval, err2 = p.handler.DeleteNotification(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteNotification: "+err2.Error())
		oprot.WriteMessageBegin("DeleteNotification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteNotification", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type notificationServiceProcessorSendNotification struct {
	handler NotificationService
}

func (p *notificationServiceProcessorSendNotification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotificationServiceSendNotificationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SendNotification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := NotificationServiceSendNotificationResult{}
	var retval *SendNotificationResponse
	if retval, err2 = p.handler.SendNotification(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendNotification: "+err2.Error())
		oprot.WriteMessageBegin("SendNotification", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SendNotification", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type NotificationServiceGetNotificationsByUserIdArgs struct {
	Req *GetNotificationsByUserIdRequest `thrift:"req,1" frugal:"1,default,GetNotificationsByUserIdRequest" json:"req"`
}

func NewNotificationServiceGetNotificationsByUserIdArgs() *NotificationServiceGetNotificationsByUserIdArgs {
	return &NotificationServiceGetNotificationsByUserIdArgs{}
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) InitDefault() {
	*p = NotificationServiceGetNotificationsByUserIdArgs{}
}

var NotificationServiceGetNotificationsByUserIdArgs_Req_DEFAULT *GetNotificationsByUserIdRequest

func (p *NotificationServiceGetNotificationsByUserIdArgs) GetReq() (v *GetNotificationsByUserIdRequest) {
	if !p.IsSetReq() {
		return NotificationServiceGetNotificationsByUserIdArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NotificationServiceGetNotificationsByUserIdArgs) SetReq(val *GetNotificationsByUserIdRequest) {
	p.Req = val
}

var fieldIDToName_NotificationServiceGetNotificationsByUserIdArgs = map[int16]string{
	1: "req",
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NotificationServiceGetNotificationsByUserIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetNotificationsByUserIdRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNotificationsByUserId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationServiceGetNotificationsByUserIdArgs(%+v)", *p)
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) DeepEqual(ano *NotificationServiceGetNotificationsByUserIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *NotificationServiceGetNotificationsByUserIdArgs) Field1DeepEqual(src *GetNotificationsByUserIdRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type NotificationServiceGetNotificationsByUserIdResult struct {
	Success *GetNotificationsByUserIdResponse `thrift:"success,0,optional" frugal:"0,optional,GetNotificationsByUserIdResponse" json:"success,omitempty"`
}

func NewNotificationServiceGetNotificationsByUserIdResult() *NotificationServiceGetNotificationsByUserIdResult {
	return &NotificationServiceGetNotificationsByUserIdResult{}
}

func (p *NotificationServiceGetNotificationsByUserIdResult) InitDefault() {
	*p = NotificationServiceGetNotificationsByUserIdResult{}
}

var NotificationServiceGetNotificationsByUserIdResult_Success_DEFAULT *GetNotificationsByUserIdResponse

func (p *NotificationServiceGetNotificationsByUserIdResult) GetSuccess() (v *GetNotificationsByUserIdResponse) {
	if !p.IsSetSuccess() {
		return NotificationServiceGetNotificationsByUserIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NotificationServiceGetNotificationsByUserIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetNotificationsByUserIdResponse)
}

var fieldIDToName_NotificationServiceGetNotificationsByUserIdResult = map[int16]string{
	0: "success",
}

func (p *NotificationServiceGetNotificationsByUserIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NotificationServiceGetNotificationsByUserIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NotificationServiceGetNotificationsByUserIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotificationServiceGetNotificationsByUserIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetNotificationsByUserIdResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NotificationServiceGetNotificationsByUserIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNotificationsByUserId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotificationServiceGetNotificationsByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *NotificationServiceGetNotificationsByUserIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationServiceGetNotificationsByUserIdResult(%+v)", *p)
}

func (p *NotificationServiceGetNotificationsByUserIdResult) DeepEqual(ano *NotificationServiceGetNotificationsByUserIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *NotificationServiceGetNotificationsByUserIdResult) Field0DeepEqual(src *GetNotificationsByUserIdResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type NotificationServiceDeleteNotificationArgs struct {
	Req *DeleteNotificationRequest `thrift:"req,1" frugal:"1,default,DeleteNotificationRequest" json:"req"`
}

func NewNotificationServiceDeleteNotificationArgs() *NotificationServiceDeleteNotificationArgs {
	return &NotificationServiceDeleteNotificationArgs{}
}

func (p *NotificationServiceDeleteNotificationArgs) InitDefault() {
	*p = NotificationServiceDeleteNotificationArgs{}
}

var NotificationServiceDeleteNotificationArgs_Req_DEFAULT *DeleteNotificationRequest

func (p *NotificationServiceDeleteNotificationArgs) GetReq() (v *DeleteNotificationRequest) {
	if !p.IsSetReq() {
		return NotificationServiceDeleteNotificationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NotificationServiceDeleteNotificationArgs) SetReq(val *DeleteNotificationRequest) {
	p.Req = val
}

var fieldIDToName_NotificationServiceDeleteNotificationArgs = map[int16]string{
	1: "req",
}

func (p *NotificationServiceDeleteNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NotificationServiceDeleteNotificationArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NotificationServiceDeleteNotificationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotificationServiceDeleteNotificationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteNotificationRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NotificationServiceDeleteNotificationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNotification_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotificationServiceDeleteNotificationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NotificationServiceDeleteNotificationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationServiceDeleteNotificationArgs(%+v)", *p)
}

func (p *NotificationServiceDeleteNotificationArgs) DeepEqual(ano *NotificationServiceDeleteNotificationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *NotificationServiceDeleteNotificationArgs) Field1DeepEqual(src *DeleteNotificationRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type NotificationServiceDeleteNotificationResult struct {
	Success *DeleteNotificationResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteNotificationResponse" json:"success,omitempty"`
}

func NewNotificationServiceDeleteNotificationResult() *NotificationServiceDeleteNotificationResult {
	return &NotificationServiceDeleteNotificationResult{}
}

func (p *NotificationServiceDeleteNotificationResult) InitDefault() {
	*p = NotificationServiceDeleteNotificationResult{}
}

var NotificationServiceDeleteNotificationResult_Success_DEFAULT *DeleteNotificationResponse

func (p *NotificationServiceDeleteNotificationResult) GetSuccess() (v *DeleteNotificationResponse) {
	if !p.IsSetSuccess() {
		return NotificationServiceDeleteNotificationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NotificationServiceDeleteNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteNotificationResponse)
}

var fieldIDToName_NotificationServiceDeleteNotificationResult = map[int16]string{
	0: "success",
}

func (p *NotificationServiceDeleteNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NotificationServiceDeleteNotificationResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NotificationServiceDeleteNotificationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotificationServiceDeleteNotificationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteNotificationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NotificationServiceDeleteNotificationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNotification_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotificationServiceDeleteNotificationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *NotificationServiceDeleteNotificationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationServiceDeleteNotificationResult(%+v)", *p)
}

func (p *NotificationServiceDeleteNotificationResult) DeepEqual(ano *NotificationServiceDeleteNotificationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *NotificationServiceDeleteNotificationResult) Field0DeepEqual(src *DeleteNotificationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type NotificationServiceSendNotificationArgs struct {
	Req *SendNotificationRequest `thrift:"req,1" frugal:"1,default,SendNotificationRequest" json:"req"`
}

func NewNotificationServiceSendNotificationArgs() *NotificationServiceSendNotificationArgs {
	return &NotificationServiceSendNotificationArgs{}
}

func (p *NotificationServiceSendNotificationArgs) InitDefault() {
	*p = NotificationServiceSendNotificationArgs{}
}

var NotificationServiceSendNotificationArgs_Req_DEFAULT *SendNotificationRequest

func (p *NotificationServiceSendNotificationArgs) GetReq() (v *SendNotificationRequest) {
	if !p.IsSetReq() {
		return NotificationServiceSendNotificationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NotificationServiceSendNotificationArgs) SetReq(val *SendNotificationRequest) {
	p.Req = val
}

var fieldIDToName_NotificationServiceSendNotificationArgs = map[int16]string{
	1: "req",
}

func (p *NotificationServiceSendNotificationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NotificationServiceSendNotificationArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NotificationServiceSendNotificationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotificationServiceSendNotificationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSendNotificationRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NotificationServiceSendNotificationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendNotification_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotificationServiceSendNotificationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NotificationServiceSendNotificationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationServiceSendNotificationArgs(%+v)", *p)
}

func (p *NotificationServiceSendNotificationArgs) DeepEqual(ano *NotificationServiceSendNotificationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *NotificationServiceSendNotificationArgs) Field1DeepEqual(src *SendNotificationRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type NotificationServiceSendNotificationResult struct {
	Success *SendNotificationResponse `thrift:"success,0,optional" frugal:"0,optional,SendNotificationResponse" json:"success,omitempty"`
}

func NewNotificationServiceSendNotificationResult() *NotificationServiceSendNotificationResult {
	return &NotificationServiceSendNotificationResult{}
}

func (p *NotificationServiceSendNotificationResult) InitDefault() {
	*p = NotificationServiceSendNotificationResult{}
}

var NotificationServiceSendNotificationResult_Success_DEFAULT *SendNotificationResponse

func (p *NotificationServiceSendNotificationResult) GetSuccess() (v *SendNotificationResponse) {
	if !p.IsSetSuccess() {
		return NotificationServiceSendNotificationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NotificationServiceSendNotificationResult) SetSuccess(x interface{}) {
	p.Success = x.(*SendNotificationResponse)
}

var fieldIDToName_NotificationServiceSendNotificationResult = map[int16]string{
	0: "success",
}

func (p *NotificationServiceSendNotificationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NotificationServiceSendNotificationResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NotificationServiceSendNotificationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotificationServiceSendNotificationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSendNotificationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NotificationServiceSendNotificationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SendNotification_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotificationServiceSendNotificationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *NotificationServiceSendNotificationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotificationServiceSendNotificationResult(%+v)", *p)
}

func (p *NotificationServiceSendNotificationResult) DeepEqual(ano *NotificationServiceSendNotificationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *NotificationServiceSendNotificationResult) Field0DeepEqual(src *SendNotificationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
