// Code generated by Kitex v0.7.3. DO NOT EDIT.

package fileservice

import (
	file "Vnollx/kitex_gen/file"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return fileServiceServiceInfo
}

var fileServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FileService"
	handlerType := (*file.FileService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UploadFile":     kitex.NewMethodInfo(uploadFileHandler, newFileServiceUploadFileArgs, newFileServiceUploadFileResult, false),
		"DeleteFile":     kitex.NewMethodInfo(deleteFileHandler, newFileServiceDeleteFileArgs, newFileServiceDeleteFileResult, false),
		"UpdateFileInfo": kitex.NewMethodInfo(updateFileInfoHandler, newFileServiceUpdateFileInfoArgs, newFileServiceUpdateFileInfoResult, false),
		"GetFileInfo":    kitex.NewMethodInfo(getFileInfoHandler, newFileServiceGetFileInfoArgs, newFileServiceGetFileInfoResult, false),
		"GetFilesInfo":   kitex.NewMethodInfo(getFilesInfoHandler, newFileServiceGetFilesInfoArgs, newFileServiceGetFilesInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "file",
		"ServiceFilePath": `idl\file.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func uploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceUploadFileArgs)
	realResult := result.(*file.FileServiceUploadFileResult)
	success, err := handler.(file.FileService).UploadFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceUploadFileArgs() interface{} {
	return file.NewFileServiceUploadFileArgs()
}

func newFileServiceUploadFileResult() interface{} {
	return file.NewFileServiceUploadFileResult()
}

func deleteFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceDeleteFileArgs)
	realResult := result.(*file.FileServiceDeleteFileResult)
	success, err := handler.(file.FileService).DeleteFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceDeleteFileArgs() interface{} {
	return file.NewFileServiceDeleteFileArgs()
}

func newFileServiceDeleteFileResult() interface{} {
	return file.NewFileServiceDeleteFileResult()
}

func updateFileInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceUpdateFileInfoArgs)
	realResult := result.(*file.FileServiceUpdateFileInfoResult)
	success, err := handler.(file.FileService).UpdateFileInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceUpdateFileInfoArgs() interface{} {
	return file.NewFileServiceUpdateFileInfoArgs()
}

func newFileServiceUpdateFileInfoResult() interface{} {
	return file.NewFileServiceUpdateFileInfoResult()
}

func getFileInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceGetFileInfoArgs)
	realResult := result.(*file.FileServiceGetFileInfoResult)
	success, err := handler.(file.FileService).GetFileInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceGetFileInfoArgs() interface{} {
	return file.NewFileServiceGetFileInfoArgs()
}

func newFileServiceGetFileInfoResult() interface{} {
	return file.NewFileServiceGetFileInfoResult()
}

func getFilesInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*file.FileServiceGetFilesInfoArgs)
	realResult := result.(*file.FileServiceGetFilesInfoResult)
	success, err := handler.(file.FileService).GetFilesInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFileServiceGetFilesInfoArgs() interface{} {
	return file.NewFileServiceGetFilesInfoArgs()
}

func newFileServiceGetFilesInfoResult() interface{} {
	return file.NewFileServiceGetFilesInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UploadFile(ctx context.Context, req *file.UploadFileRequest) (r *file.UploadFileResponse, err error) {
	var _args file.FileServiceUploadFileArgs
	_args.Req = req
	var _result file.FileServiceUploadFileResult
	if err = p.c.Call(ctx, "UploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFile(ctx context.Context, req *file.DeleteFileRequest) (r *file.DeleteFileResponse, err error) {
	var _args file.FileServiceDeleteFileArgs
	_args.Req = req
	var _result file.FileServiceDeleteFileResult
	if err = p.c.Call(ctx, "DeleteFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFileInfo(ctx context.Context, req *file.UpdateFileInfoRequest) (r *file.UpdateFileInfoResponse, err error) {
	var _args file.FileServiceUpdateFileInfoArgs
	_args.Req = req
	var _result file.FileServiceUpdateFileInfoResult
	if err = p.c.Call(ctx, "UpdateFileInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFileInfo(ctx context.Context, req *file.GetFileInfoRequest) (r *file.GetFileInfoResponse, err error) {
	var _args file.FileServiceGetFileInfoArgs
	_args.Req = req
	var _result file.FileServiceGetFileInfoResult
	if err = p.c.Call(ctx, "GetFileInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFilesInfo(ctx context.Context, req *file.GetFilesInfoRequest) (r *file.GetFilesInfoResponse, err error) {
	var _args file.FileServiceGetFilesInfoArgs
	_args.Req = req
	var _result file.FileServiceGetFilesInfoResult
	if err = p.c.Call(ctx, "GetFilesInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
