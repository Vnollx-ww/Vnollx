// Code generated by Kitex v0.7.3. DO NOT EDIT.

package folderservice

import (
	folder "Vnollx/kitex_gen/folder"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return folderServiceServiceInfo
}

var folderServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FolderService"
	handlerType := (*folder.FolderService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateFolder":     kitex.NewMethodInfo(createFolderHandler, newFolderServiceCreateFolderArgs, newFolderServiceCreateFolderResult, false),
		"DeleteFolder":     kitex.NewMethodInfo(deleteFolderHandler, newFolderServiceDeleteFolderArgs, newFolderServiceDeleteFolderResult, false),
		"UpdateFolderInfo": kitex.NewMethodInfo(updateFolderInfoHandler, newFolderServiceUpdateFolderInfoArgs, newFolderServiceUpdateFolderInfoResult, false),
		"GetFolderInfo":    kitex.NewMethodInfo(getFolderInfoHandler, newFolderServiceGetFolderInfoArgs, newFolderServiceGetFolderInfoResult, false),
		"GetFoldersInfo":   kitex.NewMethodInfo(getFoldersInfoHandler, newFolderServiceGetFoldersInfoArgs, newFolderServiceGetFoldersInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "folder",
		"ServiceFilePath": `idl\folder.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func createFolderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*folder.FolderServiceCreateFolderArgs)
	realResult := result.(*folder.FolderServiceCreateFolderResult)
	success, err := handler.(folder.FolderService).CreateFolder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFolderServiceCreateFolderArgs() interface{} {
	return folder.NewFolderServiceCreateFolderArgs()
}

func newFolderServiceCreateFolderResult() interface{} {
	return folder.NewFolderServiceCreateFolderResult()
}

func deleteFolderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*folder.FolderServiceDeleteFolderArgs)
	realResult := result.(*folder.FolderServiceDeleteFolderResult)
	success, err := handler.(folder.FolderService).DeleteFolder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFolderServiceDeleteFolderArgs() interface{} {
	return folder.NewFolderServiceDeleteFolderArgs()
}

func newFolderServiceDeleteFolderResult() interface{} {
	return folder.NewFolderServiceDeleteFolderResult()
}

func updateFolderInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*folder.FolderServiceUpdateFolderInfoArgs)
	realResult := result.(*folder.FolderServiceUpdateFolderInfoResult)
	success, err := handler.(folder.FolderService).UpdateFolderInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFolderServiceUpdateFolderInfoArgs() interface{} {
	return folder.NewFolderServiceUpdateFolderInfoArgs()
}

func newFolderServiceUpdateFolderInfoResult() interface{} {
	return folder.NewFolderServiceUpdateFolderInfoResult()
}

func getFolderInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*folder.FolderServiceGetFolderInfoArgs)
	realResult := result.(*folder.FolderServiceGetFolderInfoResult)
	success, err := handler.(folder.FolderService).GetFolderInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFolderServiceGetFolderInfoArgs() interface{} {
	return folder.NewFolderServiceGetFolderInfoArgs()
}

func newFolderServiceGetFolderInfoResult() interface{} {
	return folder.NewFolderServiceGetFolderInfoResult()
}

func getFoldersInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*folder.FolderServiceGetFoldersInfoArgs)
	realResult := result.(*folder.FolderServiceGetFoldersInfoResult)
	success, err := handler.(folder.FolderService).GetFoldersInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFolderServiceGetFoldersInfoArgs() interface{} {
	return folder.NewFolderServiceGetFoldersInfoArgs()
}

func newFolderServiceGetFoldersInfoResult() interface{} {
	return folder.NewFolderServiceGetFoldersInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateFolder(ctx context.Context, req *folder.CreateFolderRequest) (r *folder.CreateFolderResponse, err error) {
	var _args folder.FolderServiceCreateFolderArgs
	_args.Req = req
	var _result folder.FolderServiceCreateFolderResult
	if err = p.c.Call(ctx, "CreateFolder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteFolder(ctx context.Context, req *folder.DeleteFolderRequest) (r *folder.DeleteFolderResponse, err error) {
	var _args folder.FolderServiceDeleteFolderArgs
	_args.Req = req
	var _result folder.FolderServiceDeleteFolderResult
	if err = p.c.Call(ctx, "DeleteFolder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateFolderInfo(ctx context.Context, req *folder.UpdateFolderInfoRequest) (r *folder.UpdateFolderInfoResponse, err error) {
	var _args folder.FolderServiceUpdateFolderInfoArgs
	_args.Req = req
	var _result folder.FolderServiceUpdateFolderInfoResult
	if err = p.c.Call(ctx, "UpdateFolderInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFolderInfo(ctx context.Context, req *folder.GetFolderInfoRequest) (r *folder.GetFolderInfoResponse, err error) {
	var _args folder.FolderServiceGetFolderInfoArgs
	_args.Req = req
	var _result folder.FolderServiceGetFolderInfoResult
	if err = p.c.Call(ctx, "GetFolderInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFoldersInfo(ctx context.Context, req *folder.GetFoldersInfoRequest) (r *folder.GetFoldersInfoResponse, err error) {
	var _args folder.FolderServiceGetFoldersInfoArgs
	_args.Req = req
	var _result folder.FolderServiceGetFoldersInfoResult
	if err = p.c.Call(ctx, "GetFoldersInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
