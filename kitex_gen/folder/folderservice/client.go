// Code generated by Kitex v0.7.3. DO NOT EDIT.

package folderservice

import (
	folder "Vnollx/kitex_gen/folder"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateFolder(ctx context.Context, req *folder.CreateFolderRequest, callOptions ...callopt.Option) (r *folder.CreateFolderResponse, err error)
	DeleteFolder(ctx context.Context, req *folder.DeleteFolderRequest, callOptions ...callopt.Option) (r *folder.DeleteFolderResponse, err error)
	UpdateFolderInfo(ctx context.Context, req *folder.UpdateFolderInfoRequest, callOptions ...callopt.Option) (r *folder.UpdateFolderInfoResponse, err error)
	GetFolderInfo(ctx context.Context, req *folder.GetFolderInfoRequest, callOptions ...callopt.Option) (r *folder.GetFolderInfoResponse, err error)
	GetFoldersInfo(ctx context.Context, req *folder.GetFoldersInfoRequest, callOptions ...callopt.Option) (r *folder.GetFoldersInfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFolderServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFolderServiceClient struct {
	*kClient
}

func (p *kFolderServiceClient) CreateFolder(ctx context.Context, req *folder.CreateFolderRequest, callOptions ...callopt.Option) (r *folder.CreateFolderResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFolder(ctx, req)
}

func (p *kFolderServiceClient) DeleteFolder(ctx context.Context, req *folder.DeleteFolderRequest, callOptions ...callopt.Option) (r *folder.DeleteFolderResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteFolder(ctx, req)
}

func (p *kFolderServiceClient) UpdateFolderInfo(ctx context.Context, req *folder.UpdateFolderInfoRequest, callOptions ...callopt.Option) (r *folder.UpdateFolderInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateFolderInfo(ctx, req)
}

func (p *kFolderServiceClient) GetFolderInfo(ctx context.Context, req *folder.GetFolderInfoRequest, callOptions ...callopt.Option) (r *folder.GetFolderInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFolderInfo(ctx, req)
}

func (p *kFolderServiceClient) GetFoldersInfo(ctx context.Context, req *folder.GetFoldersInfoRequest, callOptions ...callopt.Option) (r *folder.GetFoldersInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFoldersInfo(ctx, req)
}
